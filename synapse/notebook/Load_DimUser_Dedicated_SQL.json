{
	"name": "Load_DimUser_Dedicated_SQL",
	"properties": {
		"folder": {
			"name": "Dedicated_Load_Job"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "mainpool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/37b25916-1e2d-4883-bb99-00f8f55f2a88/resourceGroups/DataPractice/providers/Microsoft.Synapse/workspaces/synapse-ia137-dev/bigDataPools/mainpool",
				"name": "mainpool",
				"type": "Spark",
				"endpoint": "https://synapse-ia137-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/mainpool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"run_date = '2021-09-22'\r\n",
					"batch_id = 1\r\n",
					"source_count = 0\r\n",
					"target_count = 0\r\n",
					"db_data_lake_path='/bronze/database/tickit/users/2021/09/26/'\r\n",
					"file_data_lake_path = \"/bronze/flatfile/user/\"\r\n",
					"target_file = '/gold/staging/user/user.parquet'\r\n",
					""
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_parquet = spark.read.parquet(db_data_lake_path)\r\n",
					"#df_parquet.show()"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Load json file\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, DoubleType, ArrayType\r\n",
					"sensor_schema = StructType(fields=[\r\n",
					"    StructField('user_name', StringType(), False),\r\n",
					"    StructField('first_name', StringType(), True),\r\n",
					"    StructField('last_name', StringType(), True),\r\n",
					"    StructField('email', StringType(), True),\r\n",
					"    StructField('phone', StringType(), True),\r\n",
					"    StructField(\r\n",
					"        'address', \r\n",
					"            StructType([\r\n",
					"                StructField('street', StringType(), True),\r\n",
					"                StructField('city', StringType(), True),\r\n",
					"                StructField('state', StringType(), True),\r\n",
					"                StructField('zip', StringType(), True),\r\n",
					"            ])\r\n",
					"        \r\n",
					"    )\r\n",
					"])\r\n",
					"\r\n",
					"df_user_json = spark.read.option(\"multiline\", \"true\") \\\r\n",
					"      .json(file_data_lake_path)\r\n",
					"df_user_json = df_user_json.select(\"email\",\"first_name\", \"last_name\",  \"phone\",\"user_name\", \"address.*\")"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Add some columns to dataframe\r\n",
					"from pyspark.sql.functions import lit\r\n",
					"df_user_json = df_user_json.withColumn(\"likesports\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"liketheatre\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likeconcerts\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likejazz\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likeclassical\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likeopera\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likerock\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likevegas\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likebroadway\", lit(False))\r\n",
					"df_user_json = df_user_json.withColumn(\"likemusicals\", lit(False))\r\n",
					"df_user_json.printSchema()"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Union all 2 dataframe together\r\n",
					"columns_parquet = [\"username\", \"firstname\",   \"lastname\", \"city\", \"state\", \"email\",\"phone\",\"likesports\",\"liketheatre\",\"likeconcerts\", \"likejazz\", \"likeclassical\", \"likeopera\",\"likerock\", \"likevegas\",\"likebroadway\",\"likemusicals\"]\r\n",
					"columns_json =    [\"user_name\", \"first_name\",\"last_name\" ,\"city\",\"state\",\"email\", \"phone\",\"likesports\",\"liketheatre\",\"likeconcerts\", \"likejazz\", \"likeclassical\", \"likeopera\",\"likerock\", \"likevegas\",\"likebroadway\",\"likemusicals\" ]\r\n",
					"df_user = df_parquet[columns_parquet].unionAll(df_user_json[columns_json])\r\n",
					""
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"source_count = df_user.count()\r\n",
					"#df_user.printSchema()"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Create hash column\r\n",
					"from pyspark.sql.functions import sha2, concat_ws\r\n",
					"df_user = df_user.withColumn(\"hash_value\", sha2(concat_ws(\"||\", *df_user.columns), 256))\r\n",
					"df_user.printSchema()"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#Add column run_date and batch job\r\n",
					"df_user = df_user.withColumn('batch_id', lit(batch_id))\r\n",
					"df_user = df_user.withColumn('run_date', lit(run_date))"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_user.write.mode(\"overwrite\").parquet(target_file)"
				],
				"attachments": null,
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"'''\r\n",
					"#Convert dataframe to table to use in SQL\r\n",
					"#target_count = df_user.count()\r\n",
					"df_user.createOrReplaceTempView(\"stg_user\")\r\n",
					"'''"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"'''\r\n",
					"%%sql\r\n",
					"USE dw_tickit;\r\n",
					"--Using SCD2\r\n",
					"/*Delta lake table not support surrogate key. One method to improve performance when generating surrogate key here is to use\r\n",
					"3 immediate tables: today, previous and delta\r\n",
					"- delete delta\r\n",
					"- copy today to previous\r\n",
					"- copy stg_user above to today\r\n",
					"- Populate delta between today and previous  -> create flag which indicates INSERT OR UPDATE\r\n",
					"- Based on delta table and partition FLAG to generate surrogate key\r\n",
					"*/\r\n",
					"USE dw_tickit;\r\n",
					"MERGE INTO dim_user AS target\r\n",
					"USING\r\n",
					"(\r\n",
					"    \r\n",
					"    /*Get list of records match*/\r\n",
					"    SELECT \r\n",
					"        stg.username AS mergeKey,\r\n",
					"        0 as rownum,\r\n",
					"        0 AS maxid,\r\n",
					"        stg.username,\r\n",
					"        stg.firstname,\r\n",
					"        stg.lastname,\r\n",
					"        stg.city,\r\n",
					"        stg.state,\r\n",
					"        stg.email,\r\n",
					"        stg.phone,\r\n",
					"        stg.likesports,\r\n",
					"        stg.liketheatre,\r\n",
					"        stg.likeconcerts,\r\n",
					"        stg.likejazz,\r\n",
					"        stg.likeclassical,\r\n",
					"        stg.likeopera,\r\n",
					"        stg.likerock,\r\n",
					"        stg.likevegas,\r\n",
					"        stg.likebroadway,\r\n",
					"        stg.likemusicals,\r\n",
					"        stg.hash_value,\r\n",
					"        stg.batch_id,\r\n",
					"        stg.run_date\r\n",
					"    FROM stg_user stg\r\n",
					"    INNER JOIN dim_user dm ON stg.username = dm.username AND dm.Current_Flag = 'Y'\r\n",
					"    UNION ALL\r\n",
					"    SELECT\r\n",
					"        NULL AS mergeKey,\r\n",
					"        row_number() OVER (ORDER BY stg.username  /*PARTITION BY CASE WHEN dm.username IS NULL THEN 1 ELSE 0 END ORDER BY stg.username*/) as rownum,\r\n",
					"        (SELECT CASE WHEN MAX(user_key)<0 THEN 0 \r\n",
					"                        ELSE MAX(user_key) END FROM dim_user) AS maxid,\r\n",
					"        stg.username,\r\n",
					"        stg.firstname,\r\n",
					"        stg.lastname,\r\n",
					"        stg.city,\r\n",
					"        stg.state,\r\n",
					"        stg.email,\r\n",
					"        stg.phone,\r\n",
					"        stg.likesports,\r\n",
					"        stg.liketheatre,\r\n",
					"        stg.likeconcerts,\r\n",
					"        stg.likejazz,\r\n",
					"        stg.likeclassical,\r\n",
					"        stg.likeopera,\r\n",
					"        stg.likerock,\r\n",
					"        stg.likevegas,\r\n",
					"        stg.likebroadway,\r\n",
					"        stg.likemusicals,\r\n",
					"        stg.hash_value,\r\n",
					"        stg.batch_id,\r\n",
					"        stg.run_date\r\n",
					"    FROM stg_user stg\r\n",
					"    LEFT JOIN dim_user dm ON stg.username = dm.username\r\n",
					"    WHERE dm.username IS NULL OR (dm.Current_Flag = 'Y' AND dm.hash <> stg.hash_value)\r\n",
					"    \r\n",
					") AS source ON (source.mergeKey = target.username)\r\n",
					"WHEN MATCHED AND (target.Current_Flag ='Y' AND target.hash <> source.hash_value) THEN UPDATE\r\n",
					"SET target.End_Date = current_date(),\r\n",
					"    target.update_date = current_date(),\r\n",
					"    target.run_date = source.run_date,\r\n",
					"    target.batch_id = source.batch_id,\r\n",
					"    target.Current_Flag = 'N'\r\n",
					"WHEN NOT MATCHED THEN INSERT\r\n",
					"(\r\n",
					"    user_key,\r\n",
					"    username,\r\n",
					"    firstname,\r\n",
					"    lastname,\r\n",
					"    city,\r\n",
					"    state,\r\n",
					"    email,\r\n",
					"    phone,\r\n",
					"    likesports,\r\n",
					"    liketheatre,\r\n",
					"    likeconcerts,\r\n",
					"    likejazz,\r\n",
					"    likeclassical,\r\n",
					"    likeopera,\r\n",
					"    likerock,\r\n",
					"    likevegas,\r\n",
					"    likebroadway,\r\n",
					"    likemusicals,\r\n",
					"    update_date,\r\n",
					"    run_date,\r\n",
					"    batch_id,\r\n",
					"    hash,\r\n",
					"    Eff_Date,\r\n",
					"    End_Date,\r\n",
					"    Current_Flag\r\n",
					")\r\n",
					"VALUES\r\n",
					"(\r\n",
					"    source.rownum + source.maxid,\r\n",
					"    source.username,\r\n",
					"    source.firstname,\r\n",
					"    source.lastname,\r\n",
					"    source.city,\r\n",
					"    source.state,\r\n",
					"    source.email,\r\n",
					"    source.phone,\r\n",
					"    source.likesports,\r\n",
					"    source.liketheatre,\r\n",
					"    source.likeconcerts,\r\n",
					"    source.likejazz,\r\n",
					"    source.likeclassical,\r\n",
					"    source.likeopera,\r\n",
					"    source.likerock,\r\n",
					"    source.likevegas,\r\n",
					"    source.likebroadway,\r\n",
					"    source.likemusicals,\r\n",
					"    current_date(),\r\n",
					"    source.run_date,\r\n",
					"    source.batch_id,\r\n",
					"    source.hash_value,\r\n",
					"    current_date(),\r\n",
					"    '2199-12-31',\r\n",
					"    'Y'\r\n",
					")\r\n",
					"'''\r\n",
					""
				],
				"attachments": null,
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"'''\r\n",
					"%%sql\r\n",
					"USE dw_tickit;\r\n",
					"SELECT count(*) FROM dim_user --order by user_key\r\n",
					"--DELETE FROM dim_users where user_key <> -1\r\n",
					"--SELECT * FROM dim_users WHERE username = \"XYZ123ABC\"\r\n",
					"'''"
				],
				"attachments": null,
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}
